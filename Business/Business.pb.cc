// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Business.proto
// Protobuf C++ Version: 5.29.0-rc2

#include "Business.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr Business::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        legal_adress_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        line_activity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stock_flotation_{0},
        foreign_economic_activity_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Business::Business(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BusinessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusinessDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusinessDefaultTypeInternal() {}
  union {
    Business _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusinessDefaultTypeInternal _Business_default_instance_;
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Business_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Business_2eproto = nullptr;
const ::uint32_t
    TableStruct_Business_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::Business, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::Business, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::Business, _impl_.stock_flotation_),
        PROTOBUF_FIELD_OFFSET(::Business, _impl_.legal_adress_),
        PROTOBUF_FIELD_OFFSET(::Business, _impl_.company_name_),
        PROTOBUF_FIELD_OFFSET(::Business, _impl_.line_activity_),
        PROTOBUF_FIELD_OFFSET(::Business, _impl_.foreign_economic_activity_),
        3,
        0,
        1,
        2,
        4,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::Business)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::_Business_default_instance_._instance,
};
const char descriptor_table_protodef_Business_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\016Business.proto\"\211\001\n\010Business\022\027\n\017stock_f"
    "lotation\030\001 \002(\005\022\024\n\014legal_adress\030\002 \002(\t\022\024\n\014"
    "company_name\030\003 \002(\t\022\025\n\rline_activity\030\004 \001("
    "\t\022!\n\031foreign_economic_activity\030\005 \001(\010"
};
static ::absl::once_flag descriptor_table_Business_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Business_2eproto = {
    false,
    false,
    156,
    descriptor_table_protodef_Business_2eproto,
    "Business.proto",
    &descriptor_table_Business_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_Business_2eproto::offsets,
    file_level_enum_descriptors_Business_2eproto,
    file_level_service_descriptors_Business_2eproto,
};
// ===================================================================

class Business::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Business>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Business, _impl_._has_bits_);
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

Business::Business(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:Business)
}
inline PROTOBUF_NDEBUG_INLINE Business::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::Business& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        legal_adress_(arena, from.legal_adress_),
        company_name_(arena, from.company_name_),
        line_activity_(arena, from.line_activity_) {}

Business::Business(
    ::google::protobuf::Arena* arena,
    const Business& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Business* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stock_flotation_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, stock_flotation_),
           offsetof(Impl_, foreign_economic_activity_) -
               offsetof(Impl_, stock_flotation_) +
               sizeof(Impl_::foreign_economic_activity_));

  // @@protoc_insertion_point(copy_constructor:Business)
}
inline PROTOBUF_NDEBUG_INLINE Business::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        legal_adress_(arena),
        company_name_(arena),
        line_activity_(arena) {}

inline void Business::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stock_flotation_),
           0,
           offsetof(Impl_, foreign_economic_activity_) -
               offsetof(Impl_, stock_flotation_) +
               sizeof(Impl_::foreign_economic_activity_));
}
Business::~Business() {
  // @@protoc_insertion_point(destructor:Business)
  SharedDtor(*this);
}
inline void Business::SharedDtor(MessageLite& self) {
  Business& this_ = static_cast<Business&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.legal_adress_.Destroy();
  this_._impl_.company_name_.Destroy();
  this_._impl_.line_activity_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Business::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Business(arena);
}
constexpr auto Business::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Business),
                                            alignof(Business));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Business::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Business_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        Business::IsInitializedImpl,
        &Business::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Business>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Business::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Business>(), &Business::ByteSizeLong,
            &Business::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Business, _impl_._cached_size_),
        false,
    },
    &Business::kDescriptorMethods,
    &descriptor_table_Business_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Business::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 54, 2> Business::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Business, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::Business>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // required int32 stock_flotation = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Business, _impl_.stock_flotation_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(Business, _impl_.stock_flotation_)}},
    // required string legal_adress = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Business, _impl_.legal_adress_)}},
    // required string company_name = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(Business, _impl_.company_name_)}},
    // optional string line_activity = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(Business, _impl_.line_activity_)}},
    // optional bool foreign_economic_activity = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Business, _impl_.foreign_economic_activity_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(Business, _impl_.foreign_economic_activity_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // required int32 stock_flotation = 1;
    {PROTOBUF_FIELD_OFFSET(Business, _impl_.stock_flotation_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // required string legal_adress = 2;
    {PROTOBUF_FIELD_OFFSET(Business, _impl_.legal_adress_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // required string company_name = 3;
    {PROTOBUF_FIELD_OFFSET(Business, _impl_.company_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string line_activity = 4;
    {PROTOBUF_FIELD_OFFSET(Business, _impl_.line_activity_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool foreign_economic_activity = 5;
    {PROTOBUF_FIELD_OFFSET(Business, _impl_.foreign_economic_activity_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\10\0\14\14\15\0\0\0"
    "Business"
    "legal_adress"
    "company_name"
    "line_activity"
  }},
};

PROTOBUF_NOINLINE void Business::Clear() {
// @@protoc_insertion_point(message_clear_start:Business)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.legal_adress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.company_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.line_activity_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.stock_flotation_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.foreign_economic_activity_) -
        reinterpret_cast<char*>(&_impl_.stock_flotation_)) + sizeof(_impl_.foreign_economic_activity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Business::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Business& this_ = static_cast<const Business&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Business::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Business& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:Business)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // required int32 stock_flotation = 1;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_stock_flotation(), target);
          }

          // required string legal_adress = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_legal_adress();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "Business.legal_adress");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // required string company_name = 3;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_company_name();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "Business.company_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // optional string line_activity = 4;
          if (cached_has_bits & 0x00000004u) {
            const std::string& _s = this_._internal_line_activity();
            ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                        "Business.line_activity");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // optional bool foreign_economic_activity = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_foreign_economic_activity(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:Business)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Business::ByteSizeLong(const MessageLite& base) {
          const Business& this_ = static_cast<const Business&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Business::ByteSizeLong() const {
          const Business& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:Business)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // required string legal_adress = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_legal_adress());
            }
            // required string company_name = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_company_name());
            }
          }
           {
            // optional string line_activity = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_line_activity());
            }
          }
           {
            // required int32 stock_flotation = 1;
            if (cached_has_bits & 0x00000008u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_stock_flotation());
            }
          }
           {
            // optional bool foreign_economic_activity = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Business::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Business*>(&to_msg);
  auto& from = static_cast<const Business&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Business)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_legal_adress(from._internal_legal_adress());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_company_name(from._internal_company_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_line_activity(from._internal_line_activity());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.stock_flotation_ = from._impl_.stock_flotation_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.foreign_economic_activity_ = from._impl_.foreign_economic_activity_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Business::CopyFrom(const Business& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Business)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Business::IsInitializedImpl(
    const MessageLite& msg) {
  auto& this_ = static_cast<const Business&>(msg);
  if (_Internal::MissingRequiredFields(this_._impl_._has_bits_)) {
    return false;
  }
  return true;
}

void Business::InternalSwap(Business* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.legal_adress_, &other->_impl_.legal_adress_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_name_, &other->_impl_.company_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.line_activity_, &other->_impl_.line_activity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Business, _impl_.foreign_economic_activity_)
      + sizeof(Business::_impl_.foreign_economic_activity_)
      - PROTOBUF_FIELD_OFFSET(Business, _impl_.stock_flotation_)>(
          reinterpret_cast<char*>(&_impl_.stock_flotation_),
          reinterpret_cast<char*>(&other->_impl_.stock_flotation_));
}

::google::protobuf::Metadata Business::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Business_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
